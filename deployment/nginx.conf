upstream PersoRegBackEnd_app_server{
server unix:/home/raultr-hp/proyectos/produccion/perBackend/deployment/gunicorn.sock fail_timeout=0;

}

server {
	listen 80 default_server;
	listen [::]:80 default_server ipv6only=on;
          
        client_max_body_size 4G;

	access_log /home/raultr-hp/proyectos/produccion/perBackend/deployment/logs/nginx-access.log;
	error_log /home/raultr-hp/proyectos/produccion/perBackend/deployment/logs/nginx-error.log;

	# Make site accessible from http://localhost/
	server_name localhost;

	location /pagina {
		 alias  /home/raultr-hp/proyectos/produccion/perBackend/public/pagina/PersoRegFrontEnd/;
	}
	location /publico/{
		alias  /home/raultr-hp/proyectos/produccion/perBackend/public/;
	}

	location /static/ {
		alias /home/raultr-hp/proyectos/produccion/perBackend/static/;
	}

	location /media/{
		autoindex on;
		alias /home/raultr-hp/proyectos/produccion/perBackend/media/;
	}
	location /static/admin/{
		alias  /home/raultr-hp/proyectos/produccion/perBackend/env/lib/python2.7/site-packages/django/contrib/admin/static/admin/;
	}

 	location / {
        
	# an HTTP header important enough to have its own Wikipedia entry:
	# http://en.wikipedia.org/wiki/X-Forwarded-For
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	# enable this if and only if you use HTTPS, this helps Rack
	# set the proper protocol for doing redirects:
	# proxy_set_header X-Forwarded-Proto https;

	# pass the Host: header from the client right along so redirects
	# can be set properly within the Rack application
	proxy_set_header Host $http_host;

	# we don't want nginx trying to do something clever with
	# redirects, we set the Host: header above already.
	proxy_redirect off;

	# set "proxy_buffering off" *only* for Rainbows! when doing
	# Comet/long-poll stuff. It's also safe to set if you're
	# using only serving fast clients with Unicorn + nginx.
	# Otherwise you _want_ nginx to buffer responses to slow
	# clients, really.
	# proxy_buffering off;

	# Try to serve static files from nginx, no point in making an
	# *application* server like Unicorn/Rainbows! serve static files.
	if (!-f $request_filename) {
	proxy_pass http://PersoRegBackEnd_app_server;
	break;
	}

     }
	# Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
	#location /RequestDenied {
	#	proxy_pass http://127.0.0.1:8080;    
	#}

	#error_page 404 /404.html;
	error_page 500 502 503 504 /500.html;
	location = /500.html {
		root  /home/raultr-hp/proyectos/produccion/perBackend/static/;
	}

	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/html;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	#	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#	fastcgi_index index.php;
	#	include fastcgi_params;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#	ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
